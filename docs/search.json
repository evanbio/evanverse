[{"path":"/articles/get-started.html","id":"welcome-to-evanverse","dir":"Articles","previous_headings":"","what":"👋 Welcome to evanverse","title":"Welcome to evanverse","text":"evanverse lightweight, modular R toolkit designed assist everyday development workflow — functions simple, practical, elegant. Whether ’re installing packages, building logical filters, writing expressive scripts, evanverse offers convenience functions just work.","code":""},{"path":"/articles/get-started.html","id":"installation","dir":"Articles","previous_headings":"","what":"🚀 Installation","title":"Welcome to evanverse","text":"","code":"# Recommended installation via GitHub install.packages(\"devtools\") devtools::install_github(\"evanbio/evanverse\")"},{"path":[]},{"path":"/articles/get-started.html","id":"p-string-concatenation-operator","dir":"Articles","previous_headings":"🔧 Core Functions at a Glance","what":"%p% — String concatenation operator","title":"Welcome to evanverse","text":"","code":"\"Good\" %p% \"morning\" #> [1] \"Good morning\" #> [1] \"Good morning\""},{"path":"/articles/get-started.html","id":"combine_logic-combine-logical-vectors-in-parallel","dir":"Articles","previous_headings":"🔧 Core Functions at a Glance","what":"combine_logic() — Combine logical vectors in parallel","title":"Welcome to evanverse","text":"","code":"combine_logic(c(TRUE, FALSE), c(TRUE, TRUE)) #> [1]  TRUE FALSE #> [1] TRUE FALSE"},{"path":[]},{"path":"/articles/get-started.html","id":"additional-resources","dir":"Articles","previous_headings":"","what":"📘 Additional Resources","title":"Welcome to evanverse","text":"📄 README GitHub 🌐 Documentation site (coming soon) ❔ View functions: ?evanverse help(package = \"evanverse\")","code":""},{"path":"/articles/get-started.html","id":"a-note-from-the-author","dir":"Articles","previous_headings":"","what":"💬 A note from the author","title":"Welcome to evanverse","text":"’re building verse R — let toolkit help move faster, smoother, little happier along way. —— Evan Zhou","code":""},{"path":"/articles/package-management.html","id":"manage-your-r-packages-with-style","dir":"Articles","previous_headings":"","what":"📦 Manage Your R Packages with Style","title":"Managing R Packages with evanverse","text":"evanverse provides streamlined utility functions installing, checking, updating R packages — including support CRAN, Bioconductor, GitHub. vignette walks : inst_pkg() — install packages source check_pkg() — check package installed update_pkg() — update packages smartly","code":""},{"path":"/articles/package-management.html","id":"install-packages-inst_pkg","dir":"Articles","previous_headings":"","what":"🔧 Install Packages — inst_pkg()","title":"Managing R Packages with evanverse","text":"","code":"# Install a single CRAN package inst_pkg(\"dplyr\", source = \"CRAN\")  # Install from GitHub inst_pkg(\"evanbio/evanverse\", source = \"GitHub\")  # Install Bioconductor packages inst_pkg(\"edgeR\", source = \"Bioconductor\")"},{"path":"/articles/package-management.html","id":"check-package-availability-check_pkg","dir":"Articles","previous_headings":"","what":"🔍 Check Package Availability — check_pkg()","title":"Managing R Packages with evanverse","text":"","code":"check_pkg(\"ggplot2\")    # TRUE check_pkg(\"notapkg\")    # FALSE"},{"path":"/articles/package-management.html","id":"update-packages-update_pkg","dir":"Articles","previous_headings":"","what":"🔁 Update Packages — update_pkg()","title":"Managing R Packages with evanverse","text":"","code":"# Update CRAN and Bioconductor packages update_pkg()  # Update GitHub packages only update_pkg(pkg = c(\"evanbio/evanverse\", \"rstudio/gt\"), source = \"GitHub\")  # Update specific Bioconductor package update_pkg(pkg = \"limma\", source = \"Bioconductor\")"},{"path":"/articles/package-management.html","id":"summary","dir":"Articles","previous_headings":"","what":"📘 Summary","title":"Managing R Packages with evanverse","text":"Managing packages across CRAN, Bioconductor, GitHub doesn’t need pain. evanverse, can keep environment tidy --date — just consistent commands.","code":""},{"path":"/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Evan Zhou. Author, maintainer.","code":""},{"path":"/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Zhou E (2025). evanverse: Evan's R Universe Tools Creativity. R package version 0.1.0, https://github.com/evanbio/evanverse.","code":"@Manual{,   title = {evanverse: Evan's R Universe of Tools and Creativity},   author = {Evan Zhou},   year = {2025},   note = {R package version 0.1.0},   url = {https://github.com/evanbio/evanverse}, }"},{"path":"/index.html","id":"evanverse","dir":"","previous_headings":"","what":"evanverse","title":"evanverse","text":"evanverse modular R package created Evan Zhou. aims provide flexible expressive toolkit daily data analysis, formatting, function design.","code":""},{"path":"/index.html","id":"features","dir":"","previous_headings":"","what":"Features","title":"evanverse","text":"📦 Modular structure 🛠️ Focus personal utility reproducibility ✨ Minimal, expressive, extensible","code":""},{"path":"/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"evanverse","text":"can install development version evanverse GitHub :","code":"# install.packages(\"devtools\") # devtools::install_github(\"evanbio/evanverse\")"},{"path":"/index.html","id":"usage","dir":"","previous_headings":"","what":"Usage","title":"evanverse","text":"","code":"library(evanverse)  # Example functions will go here"},{"path":"/index.html","id":"project-structure","dir":"","previous_headings":"","what":"Project Structure","title":"evanverse","text":"package organized modules: string_utils.R – functions string manipulation output_utils.R – functions formatted output bio_utils.R – functions bioinformatics flavor fun_utils.R – experimental / playful tools","code":""},{"path":"/index.html","id":"contributing","dir":"","previous_headings":"","what":"Contributing","title":"evanverse","text":"project active development currently designed personal use. Feedback pull requests welcome future versions.","code":""},{"path":"/index.html","id":"license","dir":"","previous_headings":"","what":"License","title":"evanverse","text":"MIT © 2025 Evan Zhou","code":""},{"path":"/reference/check_pkg.html","id":null,"dir":"Reference","previous_headings":"","what":"✅ Check if packages are installed and optionally install them — check_pkg","title":"✅ Check if packages are installed and optionally install them — check_pkg","text":"utility check whether CRAN / GitHub / Bioconductor packages installed, optional auto-installation via inst_pkg().","code":""},{"path":"/reference/check_pkg.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"✅ Check if packages are installed and optionally install them — check_pkg","text":"","code":"check_pkg(   pkg = NULL,   source = c(\"CRAN\", \"GitHub\", \"Bioconductor\"),   auto_install = TRUE,   ... )"},{"path":"/reference/check_pkg.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"✅ Check if packages are installed and optionally install them — check_pkg","text":"pkg Character vector package names GitHub repos (e.g., \"r-lib/devtools\"). source Package source: one \"CRAN\", \"GitHub\", \"Bioconductor\". Case-insensitive. auto_install Logical. TRUE (default), install missing packages automatically. ... Additional arguments passed inst_pkg().","code":""},{"path":"/reference/check_pkg.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"✅ Check if packages are installed and optionally install them — check_pkg","text":"tibble columns: package, name, installed, source.","code":""},{"path":"/reference/check_pkg.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"✅ Check if packages are installed and optionally install them — check_pkg","text":"","code":"check_pkg(\"ggplot2\", source = \"CRAN\") #> ✔ Installed: ggplot2 #> # A tibble: 1 × 4 #>   package name    installed source #>   <chr>   <chr>   <lgl>     <chr>  #> 1 ggplot2 ggplot2 TRUE      CRAN   check_pkg(\"r-lib/devtools\", source = \"GitHub\", auto_install = FALSE) #> ✔ Installed: devtools #> # A tibble: 1 × 4 #>   package        name     installed source #>   <chr>          <chr>    <lgl>     <chr>  #> 1 r-lib/devtools devtools TRUE      GitHub"},{"path":"/reference/combine_logic.html","id":null,"dir":"Reference","previous_headings":"","what":"🧮 Combine multiple logical vectors with a logical operator — combine_logic","title":"🧮 Combine multiple logical vectors with a logical operator — combine_logic","text":"utility function combine two logical vectors using logical (&) (|) operations. Supports NA handling checks consistent vector lengths.","code":""},{"path":"/reference/combine_logic.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"🧮 Combine multiple logical vectors with a logical operator — combine_logic","text":"","code":"combine_logic(..., op = \"&\", na.rm = FALSE)"},{"path":"/reference/combine_logic.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"🧮 Combine multiple logical vectors with a logical operator — combine_logic","text":"... Logical vectors combine. op Operator apply: \"&\" (default) \"|\". na.rm Logical. TRUE, treats NA values TRUE (default FALSE).","code":""},{"path":"/reference/combine_logic.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"🧮 Combine multiple logical vectors with a logical operator — combine_logic","text":"single logical vector length inputs.","code":""},{"path":"/reference/combine_logic.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"🧮 Combine multiple logical vectors with a logical operator — combine_logic","text":"","code":"x <- 1:5 combine_logic(x > 2, x %% 2 == 1)            # AND by default #> [1] FALSE FALSE  TRUE FALSE  TRUE combine_logic(x > 2, x %% 2 == 1, op = \"|\")  # OR logic #> [1]  TRUE FALSE  TRUE  TRUE  TRUE combine_logic(c(TRUE, NA), c(TRUE, TRUE), na.rm = TRUE) #> [1] TRUE TRUE"},{"path":"/reference/grapes-is-grapes.html","id":null,"dir":"Reference","previous_headings":"","what":"Strict identity comparison with diagnostics — %is%","title":"Strict identity comparison with diagnostics — %is%","text":"semantic operator checks whether two objects strictly identical, prints differ .","code":""},{"path":"/reference/grapes-is-grapes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Strict identity comparison with diagnostics — %is%","text":"","code":"a %is% b"},{"path":"/reference/grapes-is-grapes.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Strict identity comparison with diagnostics — %is%","text":"First object (vector, matrix, data.frame) b Second object (vector, matrix, data.frame)","code":""},{"path":"/reference/grapes-is-grapes.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Strict identity comparison with diagnostics — %is%","text":"TRUE identical, FALSE otherwise (diagnostics)","code":""},{"path":"/reference/grapes-is-grapes.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Strict identity comparison with diagnostics — %is%","text":"","code":"1:3 %is% 1:3          # TRUE #> [1] TRUE 1:3 %is% c(1, 2, 3)   # FALSE, type mismatch #> ── ❌ Objects are NOT identical ──────────────────────────────────────────────── #> ✖ Type mismatch: \"integer\" vs \"double\" #> ✖ Class mismatch: \"integer\" vs \"numeric\" #> [1] FALSE data.frame(x=1) %is% data.frame(y=1)  # FALSE, name mismatch #> ── ❌ Objects are NOT identical ──────────────────────────────────────────────── #> ✖ Column names differ: \"x\" vs \"y\" #> ✖ Values are not identical. #> [1] FALSE"},{"path":"/reference/grapes-p-grapes.html","id":null,"dir":"Reference","previous_headings":"","what":"Paste two strings with a space — %p%","title":"Paste two strings with a space — %p%","text":"%p% custom infix operator string concatenation single space. ’s inspired readability %>%, meant expressive text building.","code":""},{"path":"/reference/grapes-p-grapes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Paste two strings with a space — %p%","text":"","code":"lhs %p% rhs"},{"path":"/reference/grapes-p-grapes.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Paste two strings with a space — %p%","text":"lhs character vector left-hand side. rhs character vector right-hand side.","code":""},{"path":"/reference/grapes-p-grapes.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Paste two strings with a space — %p%","text":"character vector, elements lhs rhs pasted together using space.","code":""},{"path":"/reference/grapes-p-grapes.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Paste two strings with a space — %p%","text":"","code":"\"Hello\" %p% \"world\" #> [1] \"Hello world\" \"Good\" %p% \"job\" #> [1] \"Good job\""},{"path":"/reference/hex2rgb.html","id":null,"dir":"Reference","previous_headings":"","what":"🎨 Convert HEX color(s) to RGB format — hex2rgb","title":"🎨 Convert HEX color(s) to RGB format — hex2rgb","text":"Converts single HEX string character vector HEX strings RGB numeric values.","code":""},{"path":"/reference/hex2rgb.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"🎨 Convert HEX color(s) to RGB format — hex2rgb","text":"","code":"hex2rgb(hex)"},{"path":"/reference/hex2rgb.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"🎨 Convert HEX color(s) to RGB format — hex2rgb","text":"hex HEX color string (e.g., \"#FF8000\") character vector HEX codes.","code":""},{"path":"/reference/hex2rgb.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"🎨 Convert HEX color(s) to RGB format — hex2rgb","text":"numeric vector length 3 single HEX input, named list RGB vectors multiple inputs.","code":""},{"path":"/reference/hex2rgb.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"🎨 Convert HEX color(s) to RGB format — hex2rgb","text":"","code":"hex2rgb(\"#FF8000\") #> ✔ #FF8000 -> RGB: c(255, 128, 0) #> [1] 255 128   0 hex2rgb(c(\"#FF8000\", \"#00FF00\")) #> ✔ Converted 2 HEX values to RGB: #> ℹ #FF8000 -> RGB: c(255, 128, 0) #> ℹ #00FF00 -> RGB: c(0, 255, 0) #> $`#FF8000` #> [1] 255 128   0 #>  #> $`#00FF00` #> [1]   0 255   0 #>"},{"path":"/reference/inst_pkg.html","id":null,"dir":"Reference","previous_headings":"","what":"📦 Install R Packages from Multiple Sources — inst_pkg","title":"📦 Install R Packages from Multiple Sources — inst_pkg","text":"unified installer R packages CRAN, GitHub, Bioconductor, local source.","code":""},{"path":"/reference/inst_pkg.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"📦 Install R Packages from Multiple Sources — inst_pkg","text":"","code":"inst_pkg(   pkg = NULL,   source = c(\"CRAN\", \"GitHub\", \"Bioconductor\", \"local\"),   path = NULL,   ... )"},{"path":"/reference/inst_pkg.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"📦 Install R Packages from Multiple Sources — inst_pkg","text":"pkg Package name(s) GitHub repo (e.g., \"user/repo\"). required source = \"local\". source Source package: \"CRAN\", \"GitHub\", \"Bioconductor\", \"local\". Case-insensitive, shorthand allowed. path Path local package file (used source = \"local\"). ... Additional arguments passed install.packages(), devtools::install_github(), BiocManager::install().","code":""},{"path":"/reference/inst_pkg.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"📦 Install R Packages from Multiple Sources — inst_pkg","text":"NULL (invisibly)","code":""},{"path":"/reference/inst_pkg.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"📦 Install R Packages from Multiple Sources — inst_pkg","text":"","code":"inst_pkg(\"dplyr\", source = \"cran\") #> ✅ Package [dplyr] is already installed. Skipped. inst_pkg(\"hadley/emo\", source = \"gh\") #> 🔽 Installing from GitHub: [hadley/emo] #> Using GitHub PAT from the git credential store. #> Downloading GitHub repo hadley/emo@HEAD #>  #> ── R CMD build ───────────────────────────────────────────────────────────────── #> * checking for file 'C:\\Users\\84241\\AppData\\Local\\Temp\\RtmpovnF5r\\remotescf503d6e28f3\\hadley-emo-3f03b11/DESCRIPTION' ... OK  #> * preparing 'emo':  #> * checking DESCRIPTION meta-information ... OK  #> * checking for LF line-endings in source and make files and shell scripts  #> * checking for empty or unneeded directories  #> * building 'emo_0.0.0.9000.tar.gz'  #>   #> Installing package into 'C:/Users/84241/AppData/Local/Temp/RtmpULzUOz/temp_libpath137384bfa4c68' #> (as 'lib' is unspecified) #> 🎉 Installation complete! inst_pkg(\"scRNAseq\", source = \"bio\") #> ✅ Package [scRNAseq] is already installed. Skipped. inst_pkg(source = \"local\", path = \"mypackage.tar.gz\") #> 📂 Installing from local path: [mypackage.tar.gz] #> Installing package into 'C:/Users/84241/AppData/Local/Temp/RtmpULzUOz/temp_libpath137384bfa4c68' #> (as 'lib' is unspecified) #> Warning: installation of package 'mypackage.tar.gz' had non-zero exit status #> 🎉 Installation complete!"},{"path":"/reference/plot_venn.html","id":null,"dir":"Reference","previous_headings":"","what":"🎨 Draw Venn Diagrams (2–4 sets, classic or gradient style) — plot_venn","title":"🎨 Draw Venn Diagrams (2–4 sets, classic or gradient style) — plot_venn","text":"flexible unified Venn diagram plotting function supporting ggvenn ggVennDiagram. Automatically handles naming, de-duplication, visualization.","code":""},{"path":"/reference/plot_venn.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"🎨 Draw Venn Diagrams (2–4 sets, classic or gradient style) — plot_venn","text":"","code":"plot_venn(   set1,   set2,   set3 = NULL,   set4 = NULL,   category.names = NULL,   fill = c(\"skyblue\", \"pink\", \"lightgreen\", \"lightyellow\"),   label = \"count\",   label_geom = \"label\",   label_alpha = 0,   fill_alpha = 0.5,   label_size = 4,   label_color = \"black\",   set_color = \"black\",   set_size = 5,   edge_lty = \"solid\",   edge_size = 0.8,   title = \"My Venn Diagram\",   title_size = 14,   title_color = \"#F06292\",   legend.position = \"none\",   method = c(\"classic\", \"gradient\"),   digits = 1,   label_sep = \",\",   show_outside = \"auto\",   auto_scale = FALSE,   palette = \"Spectral\",   direction = 1,   preview = TRUE,   return_sets = FALSE,   ... )"},{"path":"/reference/plot_venn.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"🎨 Draw Venn Diagrams (2–4 sets, classic or gradient style) — plot_venn","text":"set1, set2, set3, set4 Input vectors. least two sets required. category.names Optional vector set names. NULL, variable names used. fill Fill colors (method = \"classic\"). label Label type: \"count\", \"percent\", \"\", \"none\". label_geom Label geometry ggVennDiagram: \"label\" \"text\". label_alpha Background transparency labels (gradient). fill_alpha Transparency filled regions (classic). label_size Size region labels. label_color Color region labels. set_color Color set labels borders. set_size Font size set names. edge_lty Line type borders. edge_size Border thickness. title Plot title. title_size Title font size. title_color Title font color. legend.position Legend position. Default: \"none\". method Drawing method: \"classic\" (ggvenn) \"gradient\" (ggVennDiagram). digits Decimal places percentages (classic ). label_sep Separator overlapping elements (classic ). show_outside Show outside elements (classic ). auto_scale Whether auto-scale layout (classic ). palette Gradient palette name (gradient ). direction Palette direction (gradient ). preview Whether print plot screen. return_sets TRUE, returns list de-duplicated input sets. ... Additional arguments passed underlying plot function.","code":""},{"path":"/reference/plot_venn.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"🎨 Draw Venn Diagrams (2–4 sets, classic or gradient style) — plot_venn","text":"ggplot object (optionally list processed sets return_sets = TRUE).","code":""},{"path":"/reference/plot_venn.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"🎨 Draw Venn Diagrams (2–4 sets, classic or gradient style) — plot_venn","text":"","code":"set.seed(123) g1 <- sample(letters, 15) g2 <- sample(letters, 10) g3 <- sample(letters, 12)  # Classic 3-set Venn plot_venn(g1, g2, g3, method = \"classic\", title = \"Classic Venn\")    # Gradient 2-set Venn plot_venn(g1, g2, method = \"gradient\", title = \"Gradient Venn\")    # Return sets for downstream use out <- plot_venn(g1, g2, return_sets = TRUE)  names(out) #> [1] \"plot\" \"sets\""},{"path":"/reference/remind.html","id":null,"dir":"Reference","previous_headings":"","what":"📌 Show usage tips for common R commands — remind","title":"📌 Show usage tips for common R commands — remind","text":"helper recall commonly used R functions examples.","code":""},{"path":"/reference/remind.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"📌 Show usage tips for common R commands — remind","text":"","code":"remind(keyword = NULL)"},{"path":"/reference/remind.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"📌 Show usage tips for common R commands — remind","text":"keyword keyword like \"glimpse\" \"read_excel\". NULL, show examples.","code":""},{"path":"/reference/remind.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"📌 Show usage tips for common R commands — remind","text":"Printed reminder keyword list (invisibly)","code":""},{"path":"/reference/remind.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"📌 Show usage tips for common R commands — remind","text":"","code":"remind(\"glimpse\") #>  #> ── 🔎 glimpse ────────────────────────────────────────────────────────────────── #> 🔍 `glimpse(df)` from dplyr gives a compact overview.  #>  remind()  # Show all keywords #>  #> ── Usage Examples ────────────────────────────────────────────────────────────── #> ℹ \"glimpse\": 🔍 `glimpse(df)` from dplyr gives a compact overview. #> ── Available Keywords ────────────────────────────────────────────────────────── #> `glimpse, read_excel, droplevels, modifyList, do.call, sprintf, scRNAseq, #> basename, here, stopifnot`"},{"path":"/reference/rgb2hex.html","id":null,"dir":"Reference","previous_headings":"","what":"🎨 Convert RGB values to HEX color codes — rgb2hex","title":"🎨 Convert RGB values to HEX color codes — rgb2hex","text":"utility function convert RGB color values (either numeric vector list vectors) HEX color codes, informative feedback.","code":""},{"path":"/reference/rgb2hex.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"🎨 Convert RGB values to HEX color codes — rgb2hex","text":"","code":"rgb2hex(rgb)"},{"path":"/reference/rgb2hex.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"🎨 Convert RGB values to HEX color codes — rgb2hex","text":"rgb numeric vector length 3 (e.g. c(255, 128, 0)), list vectors (e.g. list(c(255, 128, 0), c(0, 255, 0))).","code":""},{"path":"/reference/rgb2hex.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"🎨 Convert RGB values to HEX color codes — rgb2hex","text":"HEX color string single RGB vector provided, character vector HEX codes list RGB values provided.","code":""},{"path":"/reference/rgb2hex.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"🎨 Convert RGB values to HEX color codes — rgb2hex","text":"","code":"# Convert single RGB value rgb2hex(c(255, 128, 0))  # \"#FF8000\" #> ✔ RGB: c(255, 128, 0) → HEX: #FF8000 #> [1] \"#FF8000\"  # Convert multiple RGB values rgb2hex(list(c(255, 128, 0), c(0, 255, 0)))  # c(\"#FF8000\", \"#00FF00\") #> ✔ Converted 2 RGB value(s) to HEX: #> ℹ RGB: c(255, 128, 0) → HEX: #FF8000 #> ℹ RGB: c(0, 255, 0) → HEX: #00FF00 #> [1] \"#FF8000\" \"#00FF00\""},{"path":"/reference/update_pkg.html","id":null,"dir":"Reference","previous_headings":"","what":"🔄 Update R Packages from CRAN, GitHub, or Bioconductor — update_pkg","title":"🔄 Update R Packages from CRAN, GitHub, or Bioconductor — update_pkg","text":"unified function update R packages source. Supports full updates, source-specific updates, targeted package updates. Automatically sets mirrors (Tsinghua CRAN, Tsinghua Bioconductor) handles version compatibility checks. Ensures Bioconductor installations specify correct version avoid mismatches.","code":""},{"path":"/reference/update_pkg.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"🔄 Update R Packages from CRAN, GitHub, or Bioconductor — update_pkg","text":"","code":"update_pkg(pkg = NULL, source = NULL)"},{"path":"/reference/update_pkg.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"🔄 Update R Packages from CRAN, GitHub, or Bioconductor — update_pkg","text":"pkg Character vector. Name(s) package(s) update. GitHub, use \"user/repo\" format. required source specified. source Character. source package(s): \"CRAN\", \"GitHub\" (\"gh\"), \"Bioconductor\" (\"bio\"). Optional updating installed CRAN Bioconductor packages.","code":""},{"path":"/reference/update_pkg.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"🔄 Update R Packages from CRAN, GitHub, or Bioconductor — update_pkg","text":"Invisible NULL. Outputs update progress logs via message().","code":""},{"path":"/reference/with_timer.html","id":null,"dir":"Reference","previous_headings":"","what":"⏱️ Wrap a function to measure and display execution time — with_timer","title":"⏱️ Wrap a function to measure and display execution time — with_timer","text":"utility wraps function CLI-based timing displays runtime seconds. especially useful benchmarking logging time-consuming tasks.","code":""},{"path":"/reference/with_timer.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"⏱️ Wrap a function to measure and display execution time — with_timer","text":"","code":"with_timer(fn, name = \"Task\")"},{"path":"/reference/with_timer.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"⏱️ Wrap a function to measure and display execution time — with_timer","text":"fn function wrapped name short descriptive name task (used log output)","code":""},{"path":"/reference/with_timer.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"⏱️ Wrap a function to measure and display execution time — with_timer","text":"new function executes fn(...) prints timing information","code":""},{"path":"/reference/with_timer.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"⏱️ Wrap a function to measure and display execution time — with_timer","text":"function requires cli tictoc packages.","code":""},{"path":"/reference/with_timer.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"⏱️ Wrap a function to measure and display execution time — with_timer","text":"","code":"slow_fn <- function(n) { Sys.sleep(0.2); n^2 } timed_fn <- with_timer(slow_fn, name = \"Square Task\") timed_fn(5) #>  #> ── Square Task started at 2025-04-17 16:48:34.49253 ──────────────────────────── #> ✔ Square Task completed in \"0.220\" seconds"},{"path":"/news/index.html","id":"evanverse-010","dir":"Changelog","previous_headings":"","what":"evanverse 0.1.0","title":"evanverse 0.1.0","text":"✨ First Release 🎉 Introduced %p% operator expressive string concatenation Built modular structure dev/00_setup.R, tests, MIT license Added GitHub integration install instructions","code":""}]
