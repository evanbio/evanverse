[{"path":"https://evanbio.github.io/evanverse/articles/get-started.html","id":"welcome-to-evanverse","dir":"Articles","previous_headings":"","what":"👋 Welcome to evanverse","title":"Welcome to evanverse","text":"evanverse lightweight, modular R toolkit designed assist everyday development workflow — functions simple, practical, elegant. Whether ’re installing packages, building logical filters, writing expressive scripts, evanverse offers convenience functions just work.","code":""},{"path":"https://evanbio.github.io/evanverse/articles/get-started.html","id":"installation","dir":"Articles","previous_headings":"","what":"🚀 Installation","title":"Welcome to evanverse","text":"","code":"# Recommended installation via GitHub install.packages(\"devtools\") devtools::install_github(\"evanbio/evanverse\")"},{"path":[]},{"path":"https://evanbio.github.io/evanverse/articles/get-started.html","id":"p-string-concatenation-operator","dir":"Articles","previous_headings":"🔧 Core Functions at a Glance","what":"%p% — String concatenation operator","title":"Welcome to evanverse","text":"","code":"\"Good\" %p% \"morning\" #> [1] \"Good morning\" #> [1] \"Good morning\""},{"path":"https://evanbio.github.io/evanverse/articles/get-started.html","id":"combine_logic-combine-logical-vectors-in-parallel","dir":"Articles","previous_headings":"🔧 Core Functions at a Glance","what":"combine_logic() — Combine logical vectors in parallel","title":"Welcome to evanverse","text":"","code":"combine_logic(c(TRUE, FALSE), c(TRUE, TRUE)) #> [1]  TRUE FALSE #> [1] TRUE FALSE"},{"path":[]},{"path":"https://evanbio.github.io/evanverse/articles/get-started.html","id":"additional-resources","dir":"Articles","previous_headings":"","what":"📘 Additional Resources","title":"Welcome to evanverse","text":"📄 README GitHub 🌐 Documentation site (coming soon) ❔ View functions: ?evanverse help(package = \"evanverse\")","code":""},{"path":"https://evanbio.github.io/evanverse/articles/get-started.html","id":"a-note-from-the-author","dir":"Articles","previous_headings":"","what":"💬 A note from the author","title":"Welcome to evanverse","text":"’re building verse R — let toolkit help move faster, smoother, little happier along way. —— Evan Zhou","code":""},{"path":"https://evanbio.github.io/evanverse/articles/package-management.html","id":"manage-your-r-packages-with-style","dir":"Articles","previous_headings":"","what":"📦 Manage Your R Packages with Style","title":"Managing R Packages with evanverse","text":"evanverse provides streamlined utility functions installing, checking, updating R packages — including support CRAN, Bioconductor, GitHub. vignette walks : inst_pkg() — install packages source check_pkg() — check package installed update_pkg() — update packages smartly","code":""},{"path":"https://evanbio.github.io/evanverse/articles/package-management.html","id":"install-packages-inst_pkg","dir":"Articles","previous_headings":"","what":"🔧 Install Packages — inst_pkg()","title":"Managing R Packages with evanverse","text":"","code":"# Install a single CRAN package inst_pkg(\"dplyr\", source = \"CRAN\")  # Install from GitHub inst_pkg(\"evanbio/evanverse\", source = \"GitHub\")  # Install Bioconductor packages inst_pkg(\"edgeR\", source = \"Bioconductor\")"},{"path":"https://evanbio.github.io/evanverse/articles/package-management.html","id":"check-package-availability-check_pkg","dir":"Articles","previous_headings":"","what":"🔍 Check Package Availability — check_pkg()","title":"Managing R Packages with evanverse","text":"","code":"check_pkg(\"ggplot2\")    # TRUE check_pkg(\"notapkg\")    # FALSE"},{"path":"https://evanbio.github.io/evanverse/articles/package-management.html","id":"update-packages-update_pkg","dir":"Articles","previous_headings":"","what":"🔁 Update Packages — update_pkg()","title":"Managing R Packages with evanverse","text":"","code":"# Update CRAN and Bioconductor packages update_pkg()  # Update GitHub packages only update_pkg(pkg = c(\"evanbio/evanverse\", \"rstudio/gt\"), source = \"GitHub\")  # Update specific Bioconductor package update_pkg(pkg = \"limma\", source = \"Bioconductor\")"},{"path":"https://evanbio.github.io/evanverse/articles/package-management.html","id":"summary","dir":"Articles","previous_headings":"","what":"📘 Summary","title":"Managing R Packages with evanverse","text":"Managing packages across CRAN, Bioconductor, GitHub doesn’t need pain. evanverse, can keep environment tidy --date — just consistent commands.","code":""},{"path":"https://evanbio.github.io/evanverse/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Evan Zhou. Author, maintainer.","code":""},{"path":"https://evanbio.github.io/evanverse/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Zhou E (2025). evanverse: Evan's R Universe Tools Creativity. R package version 0.1.0, https://github.com/evanbio/evanverse.","code":"@Manual{,   title = {evanverse: Evan's R Universe of Tools and Creativity},   author = {Evan Zhou},   year = {2025},   note = {R package version 0.1.0},   url = {https://github.com/evanbio/evanverse}, }"},{"path":"https://evanbio.github.io/evanverse/index.html","id":"evanverse","dir":"","previous_headings":"","what":"evanverse","title":"evanverse","text":"evanverse modular lightweight R package Evan Zhou. provides flexible expressive toolkit daily R development, including data processing, scripting, reproducible analysis workflows.","code":""},{"path":"https://evanbio.github.io/evanverse/index.html","id":"features","dir":"","previous_headings":"","what":"Features","title":"evanverse","text":"📦 Modular structure focus clarity reusability 🛠️ Practical utilities package handling, logic, workflow automation ✨ Minimal, expressive, extensible design","code":""},{"path":"https://evanbio.github.io/evanverse/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"evanverse","text":"can install development version evanverse GitHub :","code":"# install.packages(\"devtools\") # devtools::install_github(\"evanbio/evanverse\")"},{"path":"https://evanbio.github.io/evanverse/index.html","id":"usage","dir":"","previous_headings":"","what":"Usage","title":"evanverse","text":"","code":"library(evanverse)  # Example: \"Hello\" %p% \"world\""},{"path":"https://evanbio.github.io/evanverse/index.html","id":"functions-overview","dir":"","previous_headings":"","what":"Functions Overview","title":"evanverse","text":"evanverse currently provides following utility functions: check_pkg() — check packages installed inst_pkg() — install packages CRAN, GitHub, Bioconductor update_pkg() — update packages source %p% — paste two strings space %% — strict identity comparison combine_logic() — combine multiple logical vectors hex2rgb() — convert HEX RGB rgb2hex() — convert RGB HEX plot_venn() — draw 2–4 set Venn diagrams with_timer() — wrap time function remind() — show helpful R usage tips","code":""},{"path":"https://evanbio.github.io/evanverse/index.html","id":"documentation","dir":"","previous_headings":"","what":"Documentation","title":"evanverse","text":"Full documentation vignettes available : 👉 https://evanbio.github.io/evanverse/","code":""},{"path":"https://evanbio.github.io/evanverse/index.html","id":"contributing","dir":"","previous_headings":"","what":"Contributing","title":"evanverse","text":"project active development currently designed personal use. Feedback pull requests welcome future versions.","code":""},{"path":"https://evanbio.github.io/evanverse/index.html","id":"license","dir":"","previous_headings":"","what":"License","title":"evanverse","text":"MIT License © 2025 Evan Zhou","code":""},{"path":"https://evanbio.github.io/evanverse/reference/any_void.html","id":null,"dir":"Reference","previous_headings":"","what":"🔍 any_void(): Check if Any Value is Void (NA / NULL / ","title":"🔍 any_void(): Check if Any Value is Void (NA / NULL / ","text":"Test whether element vector list considered \"void\". Void values include NA, NULL, empty strings (\"\"), can customize ones consider.","code":""},{"path":"https://evanbio.github.io/evanverse/reference/any_void.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"🔍 any_void(): Check if Any Value is Void (NA / NULL / ","text":"","code":"any_void(x, include_na = TRUE, include_null = TRUE, include_empty_str = TRUE)"},{"path":"https://evanbio.github.io/evanverse/reference/any_void.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"🔍 any_void(): Check if Any Value is Void (NA / NULL / ","text":"x vector list. include_na Logical. Consider NA void. Default: TRUE. include_null Logical. Consider NULL void. Default: TRUE. include_empty_str Logical. Consider \"\" void. Default: TRUE.","code":""},{"path":"https://evanbio.github.io/evanverse/reference/any_void.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"🔍 any_void(): Check if Any Value is Void (NA / NULL / ","text":"Logical. TRUE void values present, FALSE otherwise.","code":""},{"path":"https://evanbio.github.io/evanverse/reference/any_void.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"🔍 any_void(): Check if Any Value is Void (NA / NULL / ","text":"","code":"any_void(c(\"a\", \"\", NA))               # TRUE #> [1] TRUE any_void(list(\"x\", NULL, \"y\"))         # TRUE #> [1] TRUE any_void(c(\"a\", \"b\", \"c\"))             # FALSE #> [1] FALSE any_void(NULL)                         # TRUE #> [1] TRUE any_void(\"\", include_empty_str = FALSE)  # FALSE #> [1] FALSE"},{"path":"https://evanbio.github.io/evanverse/reference/bio_palette_gallery.html","id":null,"dir":"Reference","previous_headings":"","what":"🌈 bio_palette_gallery(): Visualize All Palettes in a Gallery View — bio_palette_gallery","title":"🌈 bio_palette_gallery(): Visualize All Palettes in a Gallery View — bio_palette_gallery","text":"Display palettes compiled RDS paged gallery format.","code":""},{"path":"https://evanbio.github.io/evanverse/reference/bio_palette_gallery.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"🌈 bio_palette_gallery(): Visualize All Palettes in a Gallery View — bio_palette_gallery","text":"","code":"bio_palette_gallery(   palette_rds = \"data/palettes.rds\",   type = c(\"sequential\", \"diverging\", \"qualitative\"),   max_palettes = 30,   max_row = 12,   verbose = TRUE )"},{"path":"https://evanbio.github.io/evanverse/reference/bio_palette_gallery.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"🌈 bio_palette_gallery(): Visualize All Palettes in a Gallery View — bio_palette_gallery","text":"palette_rds Path compiled RDS (default: \"data/palettes.rds\") type Palette types include: \"sequential\", \"diverging\", \"qualitative\" max_palettes Number palettes per page (default: 30) max_row Max colors per row (default: 12) verbose Whether print summary/logs (default: TRUE)","code":""},{"path":"https://evanbio.github.io/evanverse/reference/bio_palette_gallery.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"🌈 bio_palette_gallery(): Visualize All Palettes in a Gallery View — bio_palette_gallery","text":"named list ggplot objects (one per page)","code":""},{"path":"https://evanbio.github.io/evanverse/reference/check_pkg.html","id":null,"dir":"Reference","previous_headings":"","what":"✅ Check if packages are installed and optionally install them — check_pkg","title":"✅ Check if packages are installed and optionally install them — check_pkg","text":"utility check whether CRAN / GitHub / Bioconductor packages installed, optional auto-installation via inst_pkg().","code":""},{"path":"https://evanbio.github.io/evanverse/reference/check_pkg.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"✅ Check if packages are installed and optionally install them — check_pkg","text":"","code":"check_pkg(   pkg = NULL,   source = c(\"CRAN\", \"GitHub\", \"Bioconductor\"),   auto_install = TRUE,   ... )"},{"path":"https://evanbio.github.io/evanverse/reference/check_pkg.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"✅ Check if packages are installed and optionally install them — check_pkg","text":"pkg Character vector package names GitHub repos (e.g., \"r-lib/devtools\"). source Package source: one \"CRAN\", \"GitHub\", \"Bioconductor\". Case-insensitive. auto_install Logical. TRUE (default), install missing packages automatically. ... Additional arguments passed inst_pkg().","code":""},{"path":"https://evanbio.github.io/evanverse/reference/check_pkg.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"✅ Check if packages are installed and optionally install them — check_pkg","text":"tibble columns: package, name, installed, source.","code":""},{"path":"https://evanbio.github.io/evanverse/reference/check_pkg.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"✅ Check if packages are installed and optionally install them — check_pkg","text":"","code":"check_pkg(\"ggplot2\", source = \"CRAN\") #> ✔ Installed: ggplot2 #> # A tibble: 1 × 4 #>   package name    installed source #>   <chr>   <chr>   <lgl>     <chr>  #> 1 ggplot2 ggplot2 TRUE      CRAN   check_pkg(\"r-lib/devtools\", source = \"GitHub\", auto_install = FALSE) #> ✔ Installed: devtools #> # A tibble: 1 × 4 #>   package        name     installed source #>   <chr>          <chr>    <lgl>     <chr>  #> 1 r-lib/devtools devtools TRUE      GitHub"},{"path":"https://evanbio.github.io/evanverse/reference/cols_with_void.html","id":null,"dir":"Reference","previous_headings":"","what":"🧭 cols_with_void(): Detect Columns Containing Void Values — cols_with_void","title":"🧭 cols_with_void(): Detect Columns Containing Void Values — cols_with_void","text":"Scan data.frame tibble identify columns contain \"void\" values. Void values include NA, NULL, \"\", can toggled via parameters.","code":""},{"path":"https://evanbio.github.io/evanverse/reference/cols_with_void.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"🧭 cols_with_void(): Detect Columns Containing Void Values — cols_with_void","text":"","code":"cols_with_void(   data,   include_na = TRUE,   include_null = TRUE,   include_empty_str = TRUE,   return_names = TRUE )"},{"path":"https://evanbio.github.io/evanverse/reference/cols_with_void.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"🧭 cols_with_void(): Detect Columns Containing Void Values — cols_with_void","text":"data data.frame tibble. include_na Logical. Detect NA TRUE. Default: TRUE. include_null Logical. Detect NULL TRUE. Default: TRUE. include_empty_str Logical. Detect \"\" TRUE. Default: TRUE. return_names Logical. TRUE (default), return column names; else logical vector.","code":""},{"path":"https://evanbio.github.io/evanverse/reference/cols_with_void.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"🧭 cols_with_void(): Detect Columns Containing Void Values — cols_with_void","text":"character vector (column names) logical vector indicating void presence per column.","code":""},{"path":"https://evanbio.github.io/evanverse/reference/cols_with_void.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"🧭 cols_with_void(): Detect Columns Containing Void Values — cols_with_void","text":"","code":"df <- data.frame(name = c(\"A\", \"\", \"C\"), score = c(1, NA, 3), id = 1:3) cols_with_void(df) #> [1] \"name\"  \"score\" cols_with_void(df, return_names = FALSE) #>  name score    id  #>  TRUE  TRUE FALSE"},{"path":"https://evanbio.github.io/evanverse/reference/combine_logic.html","id":null,"dir":"Reference","previous_headings":"","what":"🧮 Combine multiple logical vectors with a logical operator — combine_logic","title":"🧮 Combine multiple logical vectors with a logical operator — combine_logic","text":"utility function combine two logical vectors using logical (&) (|) operations. Supports NA handling checks consistent vector lengths.","code":""},{"path":"https://evanbio.github.io/evanverse/reference/combine_logic.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"🧮 Combine multiple logical vectors with a logical operator — combine_logic","text":"","code":"combine_logic(..., op = \"&\", na.rm = FALSE)"},{"path":"https://evanbio.github.io/evanverse/reference/combine_logic.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"🧮 Combine multiple logical vectors with a logical operator — combine_logic","text":"... Logical vectors combine. op Operator apply: \"&\" (default) \"|\". na.rm Logical. TRUE, treats NA values TRUE (default FALSE).","code":""},{"path":"https://evanbio.github.io/evanverse/reference/combine_logic.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"🧮 Combine multiple logical vectors with a logical operator — combine_logic","text":"single logical vector length inputs.","code":""},{"path":"https://evanbio.github.io/evanverse/reference/combine_logic.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"🧮 Combine multiple logical vectors with a logical operator — combine_logic","text":"","code":"x <- 1:5 combine_logic(x > 2, x %% 2 == 1)            # AND by default #> [1] FALSE FALSE  TRUE FALSE  TRUE combine_logic(x > 2, x %% 2 == 1, op = \"|\")  # OR logic #> [1]  TRUE FALSE  TRUE  TRUE  TRUE combine_logic(c(TRUE, NA), c(TRUE, TRUE), na.rm = TRUE) #> [1] TRUE TRUE"},{"path":"https://evanbio.github.io/evanverse/reference/compile_palettes.html","id":null,"dir":"Reference","previous_headings":"","what":"🔄 compile_palettes(): Compile JSON palettes into RDS — compile_palettes","title":"🔄 compile_palettes(): Compile JSON palettes into RDS — compile_palettes","text":"Read JSON files palettes_dir/, validate content, compile structured RDS file.","code":""},{"path":"https://evanbio.github.io/evanverse/reference/compile_palettes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"🔄 compile_palettes(): Compile JSON palettes into RDS — compile_palettes","text":"","code":"compile_palettes(   palettes_dir = \"inst/extdata/palettes\",   output_rds = \"data/palettes.rds\",   log = TRUE )"},{"path":"https://evanbio.github.io/evanverse/reference/compile_palettes.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"🔄 compile_palettes(): Compile JSON palettes into RDS — compile_palettes","text":"palettes_dir Folder containing subdirs: sequential/, diverging/, qualitative/ output_rds Path save compiled RDS file. Default: \"data/palettes.rds\" log Whether log compilation events. Default: TRUE","code":""},{"path":"https://evanbio.github.io/evanverse/reference/compile_palettes.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"🔄 compile_palettes(): Compile JSON palettes into RDS — compile_palettes","text":"Invisibly returns RDS file path (character)","code":""},{"path":"https://evanbio.github.io/evanverse/reference/create_palette.html","id":null,"dir":"Reference","previous_headings":"","what":"🎨 create_palette(): Save Custom Color Palettes as JSON — create_palette","title":"🎨 create_palette(): Save Custom Color Palettes as JSON — create_palette","text":"Save named color palette (sequential, diverging, qualitative) JSON file. Used palette sharing, reuse, future compilation.","code":""},{"path":"https://evanbio.github.io/evanverse/reference/create_palette.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"🎨 create_palette(): Save Custom Color Palettes as JSON — create_palette","text":"","code":"create_palette(   name,   type = c(\"sequential\", \"diverging\", \"qualitative\"),   colors,   color_dir = \"inst/extdata/palettes\",   log = TRUE )"},{"path":"https://evanbio.github.io/evanverse/reference/create_palette.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"🎨 create_palette(): Save Custom Color Palettes as JSON — create_palette","text":"name Character. Palette name (e.g., \"Blues\"). type Character. One \"sequential\", \"diverging\", \"qualitative\". colors Character vector HEX color values (e.g., \"#E64B35\" \"#E64B35B2\"). color_dir Root folder store palettes (default: \"inst/extdata/palettes\"). log Logical. Whether log palette creation \"logs/palettes/create_palette.log\".","code":""},{"path":"https://evanbio.github.io/evanverse/reference/create_palette.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"🎨 create_palette(): Save Custom Color Palettes as JSON — create_palette","text":"(Invisibly) list path info.","code":""},{"path":"https://evanbio.github.io/evanverse/reference/create_palette.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"🎨 create_palette(): Save Custom Color Palettes as JSON — create_palette","text":"","code":"create_palette(\"blues\", \"sequential\", c(\"#deebf7\", \"#9ecae1\", \"#3182bd\")) #> ! ⚠️ Palette already exists: inst/extdata/palettes/sequential/blues.json create_palette(\"vividset\", \"qualitative\", c(\"#E64B35\", \"#4DBBD5\", \"#00A087\")) #> ! ⚠️ Palette already exists: inst/extdata/palettes/qualitative/vividset.json"},{"path":"https://evanbio.github.io/evanverse/reference/df2list.html","id":null,"dir":"Reference","previous_headings":"","what":"📦 Convert Data Frame to Named List by Grouping — df2list","title":"📦 Convert Data Frame to Named List by Grouping — df2list","text":"Group data frame one column convert named list. key becomes list name; value column becomes vector.","code":""},{"path":"https://evanbio.github.io/evanverse/reference/df2list.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"📦 Convert Data Frame to Named List by Grouping — df2list","text":"","code":"df2list(data, key_col, value_col, verbose = TRUE)"},{"path":"https://evanbio.github.io/evanverse/reference/df2list.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"📦 Convert Data Frame to Named List by Grouping — df2list","text":"data data.frame tibble grouped. key_col Character. Column name list names. value_col Character. Column name list values. verbose Logical. Whether show message. Default = TRUE.","code":""},{"path":"https://evanbio.github.io/evanverse/reference/df2list.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"📦 Convert Data Frame to Named List by Grouping — df2list","text":"named list, element character vector values.","code":""},{"path":"https://evanbio.github.io/evanverse/reference/df2list.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"📦 Convert Data Frame to Named List by Grouping — df2list","text":"","code":"df <- data.frame(   cell_type = c(\"T_cells\", \"T_cells\", \"B_cells\", \"B_cells\"),   marker = c(\"CD3D\", \"CD3E\", \"CD79A\", \"MS4A1\") ) df2list(df, \"cell_type\", \"marker\") #> ✔ 🎯 Converted 2 groups into a named list. #> $B_cells #> [1] \"CD79A\" \"MS4A1\" #>  #> $T_cells #> [1] \"CD3D\" \"CD3E\" #>"},{"path":"https://evanbio.github.io/evanverse/reference/drop_void.html","id":null,"dir":"Reference","previous_headings":"","what":"🧼 drop_void(): Remove Void Values from a Vector or List — drop_void","title":"🧼 drop_void(): Remove Void Values from a Vector or List — drop_void","text":"Remove elements vector list considered \"void\": NA, NULL, empty strings (\"\"). can toggled via parameters.","code":""},{"path":"https://evanbio.github.io/evanverse/reference/drop_void.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"🧼 drop_void(): Remove Void Values from a Vector or List — drop_void","text":"","code":"drop_void(x, include_na = TRUE, include_null = TRUE, include_empty_str = TRUE)"},{"path":"https://evanbio.github.io/evanverse/reference/drop_void.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"🧼 drop_void(): Remove Void Values from a Vector or List — drop_void","text":"x vector list. include_na Logical. Remove NA TRUE. Default: TRUE. include_null Logical. Remove NULL TRUE. Default: TRUE. include_empty_str Logical. Remove \"\" TRUE. Default: TRUE.","code":""},{"path":"https://evanbio.github.io/evanverse/reference/drop_void.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"🧼 drop_void(): Remove Void Values from a Vector or List — drop_void","text":"cleaned vector list type input, void values removed.","code":""},{"path":"https://evanbio.github.io/evanverse/reference/drop_void.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"🧼 drop_void(): Remove Void Values from a Vector or List — drop_void","text":"","code":"drop_void(c(\"apple\", \"\", NA, \"banana\")) #> [1] \"apple\"  \"banana\" drop_void(list(\"A\", NA, \"\", NULL, \"B\")) #> [[1]] #> [1] \"A\" #>  #> [[2]] #> [1] \"B\" #>  drop_void(c(\"\", NA), include_na = FALSE) #> [1] NA"},{"path":"https://evanbio.github.io/evanverse/reference/evanverse.html","id":null,"dir":"Reference","previous_headings":"","what":"evanverse: A Utility Toolkit for Everyday R Development ⚙️📦 — evanverse","title":"evanverse: A Utility Toolkit for Everyday R Development ⚙️📦 — evanverse","text":"evanverse package offers lightweight modular collection functions, tailored support efficient reproducible R workflows research analysis.","code":""},{"path":"https://evanbio.github.io/evanverse/reference/evanverse.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"evanverse: A Utility Toolkit for Everyday R Development ⚙️📦 — evanverse","text":"provides tools : Logical operations 🔁 Package installation management 📦 Color formatting visualization support 🎨 Workflow automation utilities 🛠️ Clean wrappers common scripting tasks evanverse framework, personal, evolving toolbox — pragmatically built, cleanly organized, continuously maintained everyday scientific computing. Ideal researchers, developers, anyone values simplicity clarity. ✨","code":""},{"path":[]},{"path":"https://evanbio.github.io/evanverse/reference/evanverse.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"evanverse: A Utility Toolkit for Everyday R Development ⚙️📦 — evanverse","text":"Maintainer: Evan Zhou evanzhou.bio@gmail.com","code":""},{"path":"https://evanbio.github.io/evanverse/reference/ev_download.html","id":null,"dir":"Reference","previous_headings":"","what":"📥 ev_download(): Download a file from URL (supports FTP/HTTP + unzip) — ev_download","title":"📥 ev_download(): Download a file from URL (supports FTP/HTTP + unzip) — ev_download","text":"robust friendly downloader supports FTP/HTTP/HTTPS sources. Automatically skips download file already exists.","code":""},{"path":"https://evanbio.github.io/evanverse/reference/ev_download.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"📥 ev_download(): Download a file from URL (supports FTP/HTTP + unzip) — ev_download","text":"","code":"ev_download(   url,   dest = basename(url),   method = \"auto\",   overwrite = FALSE,   unzip = FALSE,   verbose = TRUE )"},{"path":"https://evanbio.github.io/evanverse/reference/ev_download.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"📥 ev_download(): Download a file from URL (supports FTP/HTTP + unzip) — ev_download","text":"url Character. Full URL file (FTP HTTP). dest Character. Path save file (default: basename(url)). method Character. One \"auto\", \"curl\", \"wget\", \"internal\". Default: \"auto\". overwrite Logical. Overwrite file exists. Default: FALSE. unzip Logical. Whether unzip download. Default: FALSE. verbose Logical. Show progress messages. Default: TRUE.","code":""},{"path":"https://evanbio.github.io/evanverse/reference/ev_download.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"📥 ev_download(): Download a file from URL (supports FTP/HTTP + unzip) — ev_download","text":"Invisibly returns path(s) downloaded (optionally unzipped) file(s).","code":""},{"path":"https://evanbio.github.io/evanverse/reference/file_info.html","id":null,"dir":"Reference","previous_headings":"","what":"📄 Summarize File Information (size, time, line count) — file_info","title":"📄 Summarize File Information (size, time, line count) — file_info","text":"Given file folder path (vector), returns data.frame containing file name, size (MB), last modified time, optional line count, path.","code":""},{"path":"https://evanbio.github.io/evanverse/reference/file_info.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"📄 Summarize File Information (size, time, line count) — file_info","text":"","code":"file_info(   paths,   recursive = FALSE,   count_line = TRUE,   preview = TRUE,   filter_pattern = NULL,   full_name = TRUE )"},{"path":"https://evanbio.github.io/evanverse/reference/file_info.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"📄 Summarize File Information (size, time, line count) — file_info","text":"paths Character vector file paths folder path. recursive Logical. folder given, whether search recursively. count_line Logical. Whether count lines file. Default: TRUE. preview Logical. Whether show skipped/missing messages. Default: TRUE. filter_pattern Optional regex filter file names (e.g., \"\\.R$\"). full_name Logical. Whether return full file paths. Default: TRUE.","code":""},{"path":"https://evanbio.github.io/evanverse/reference/file_info.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"📄 Summarize File Information (size, time, line count) — file_info","text":"data.frame file, size_MB, modified_time, line_count, path.","code":""},{"path":"https://evanbio.github.io/evanverse/reference/file_info.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"📄 Summarize File Information (size, time, line count) — file_info","text":"","code":"file_info(\"R\") #> ! No valid files found. #> data frame with 0 columns and 0 rows file_info(c(\"README.md\", \"DESCRIPTION\")) #> ! No valid files found. #> data frame with 0 columns and 0 rows file_info(\"R\", filter_pattern = \"\\\\.R$\", recursive = TRUE) #> ! No valid files found. #> data frame with 0 columns and 0 rows"},{"path":"https://evanbio.github.io/evanverse/reference/file_tree.html","id":null,"dir":"Reference","previous_headings":"","what":"🌲 Print and Log Directory Tree Structure — file_tree","title":"🌲 Print and Log Directory Tree Structure — file_tree","text":"Print directory structure given path tree-like format. Optionally, save result log file record keeping debugging.","code":""},{"path":"https://evanbio.github.io/evanverse/reference/file_tree.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"🌲 Print and Log Directory Tree Structure — file_tree","text":"","code":"file_tree(   path = \".\",   max_depth = 2,   log = FALSE,   log_path = \"logs/tree\",   file_name = NULL,   append = FALSE )"},{"path":"https://evanbio.github.io/evanverse/reference/file_tree.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"🌲 Print and Log Directory Tree Structure — file_tree","text":"path Character. target root directory path print. Default \".\". max_depth Integer. Maximum depth recursion subdirectories. Default 2. log Logical. Whether save tree output log file. Default FALSE. log_path Character. Directory path save log file log = TRUE. Default \"logs/tree\". file_name Character. Custom file name log file. NULL, name like \"file_tree_YYYYMMDD_HHMMSS.log\" used. append Logical. TRUE, appends existing file (present). FALSE, overwrites file. Default FALSE.","code":""},{"path":"https://evanbio.github.io/evanverse/reference/file_tree.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"🌲 Print and Log Directory Tree Structure — file_tree","text":"Invisibly returns character vector containing line file tree.","code":""},{"path":"https://evanbio.github.io/evanverse/reference/file_tree.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"🌲 Print and Log Directory Tree Structure — file_tree","text":"","code":"file_tree() #>  #> ── 📂 Directory Tree: F:\\Projects\\evanverse\\docs\\reference ───────────────────── #> ├── any_void.html  #> ├── bio_palette_gallery.html  #> ├── check_pkg.html  #> ├── cols_with_void.html  #> ├── combine_logic.html  #> ├── compile_palettes.html  #> ├── create_palette.html  #> ├── df2list.html  #> ├── drop_void.html  #> ├── ev_download.html  #> ├── evanverse-package.html  #> ├── evanverse.html  #> ├── file_info.html  #> ├── file_tree.html  #> ├── get_ext.html  #> ├── get_palette.html  #> ├── gmt2df.html  #> ├── gmt2list.html  #> ├── grapes-is-grapes.html  #> ├── grapes-nin-grapes.html  #> ├── grapes-p-grapes.html  #> ├── hex2rgb.html  #> ├── index.html  #> ├── inst  #> │   └── extdata  #> ├── inst_pkg.html  #> ├── is_void.html  #> ├── list_palettes.html  #> ├── logs  #> │   └── palettes  #> ├── pkg_version.html  #> ├── plot_pie.html  #> ├── plot_venn-1.png  #> ├── plot_venn-2.png  #> ├── plot_venn-3.png  #> ├── plot_venn-4.png  #> ├── plot_venn-5.png  #> ├── plot_venn.html  #> ├── preview_palette.html  #> ├── remind.html  #> ├── replace_void.html  #> ├── rgb2hex.html  #> ├── rows_with_void.html  #> ├── update_pkg.html  #> └── with_timer.html  file_tree(\"data\", max_depth = 3, log = TRUE) #> ✖ ❌ Directory does not exist: F:\\Projects\\evanverse\\docs\\reference\\data"},{"path":"https://evanbio.github.io/evanverse/reference/get_ext.html","id":null,"dir":"Reference","previous_headings":"","what":"🧾 Get File Extension(s) — get_ext","title":"🧾 Get File Extension(s) — get_ext","text":"Extract file extension(s) file name path. Supports vector input optionally preserves compound extensions (e.g., .tar.gz) keep_all = TRUE.","code":""},{"path":"https://evanbio.github.io/evanverse/reference/get_ext.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"🧾 Get File Extension(s) — get_ext","text":"","code":"get_ext(paths, keep_all = FALSE)"},{"path":"https://evanbio.github.io/evanverse/reference/get_ext.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"🧾 Get File Extension(s) — get_ext","text":"paths character vector file names paths. keep_all Logical. TRUE, returns full suffix first dot basename (e.g., \"tar.gz\"); otherwise returns last extension. Default: FALSE.","code":""},{"path":"https://evanbio.github.io/evanverse/reference/get_ext.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"🧾 Get File Extension(s) — get_ext","text":"character vector extensions (leading dots).","code":""},{"path":"https://evanbio.github.io/evanverse/reference/get_ext.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"🧾 Get File Extension(s) — get_ext","text":"","code":"get_ext(\"data.csv\")               # \"csv\" #> [1] \"csv\" get_ext(\"archive.tar.gz\")        # \"gz\" #> [1] \"gz\" get_ext(\"archive.tar.gz\", TRUE)  # \"tar.gz\" #> [1] \"tar.gz\" get_ext(c(\"a.R\", \"b.txt\", \"c\"))   # \"R\" \"txt\" \"\" #> [1] \"R\"   \"txt\" \"\""},{"path":"https://evanbio.github.io/evanverse/reference/get_palette.html","id":null,"dir":"Reference","previous_headings":"","what":"🎨 get_palette(): Load Color Palette from RDS — get_palette","title":"🎨 get_palette(): Load Color Palette from RDS — get_palette","text":"Load named palette data/palettes.rds, returning vector HEX colors. Automatically checks type mismatch gives smart suggestions.","code":""},{"path":"https://evanbio.github.io/evanverse/reference/get_palette.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"🎨 get_palette(): Load Color Palette from RDS — get_palette","text":"","code":"get_palette(   name,   type = c(\"sequential\", \"diverging\", \"qualitative\"),   n = NULL,   palette_rds = here::here(\"data/palettes.rds\") )"},{"path":"https://evanbio.github.io/evanverse/reference/get_palette.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"🎨 get_palette(): Load Color Palette from RDS — get_palette","text":"name Name palette (e.g. \"vividset\"). type One : \"sequential\", \"diverging\", \"qualitative\". n Number colors return. Default NULL returns . palette_rds Path RDS file. Default: ::(\"data/palettes.rds\").","code":""},{"path":"https://evanbio.github.io/evanverse/reference/get_palette.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"🎨 get_palette(): Load Color Palette from RDS — get_palette","text":"character vector HEX color codes.","code":""},{"path":"https://evanbio.github.io/evanverse/reference/get_palette.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"🎨 get_palette(): Load Color Palette from RDS — get_palette","text":"","code":"get_palette(\"vividset\", type = \"qualitative\") #> ✔ Loaded palette 'vividset' (qualitative), 9 colors. #> [1] \"#E64B35\" \"#4DBBD5\" \"#00A087\" \"#3C5488\" \"#F39B7F\" \"#8491B4\" \"#91D1C2\" #> [8] \"#DC0000\" \"#7E6148\" get_palette(\"softtrio\", type = \"qualitative\", n = 2) #> ✔ Loaded palette 'softtrio' (qualitative), 3 colors. #> [1] \"#E64B35B2\" \"#00A087B2\""},{"path":"https://evanbio.github.io/evanverse/reference/gmt2df.html","id":null,"dir":"Reference","previous_headings":"","what":"📄 Convert GMT File to Long-format Data Frame — gmt2df","title":"📄 Convert GMT File to Long-format Data Frame — gmt2df","text":"Reads .gmt gene set file returns long-format data frame one row per gene, including gene set name optional description.","code":""},{"path":"https://evanbio.github.io/evanverse/reference/gmt2df.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"📄 Convert GMT File to Long-format Data Frame — gmt2df","text":"","code":"gmt2df(file, verbose = TRUE)"},{"path":"https://evanbio.github.io/evanverse/reference/gmt2df.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"📄 Convert GMT File to Long-format Data Frame — gmt2df","text":"file Path .gmt file (supports .gmt .gmt.gz). verbose Logical. Whether show progress message. Default = TRUE.","code":""},{"path":"https://evanbio.github.io/evanverse/reference/gmt2df.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"📄 Convert GMT File to Long-format Data Frame — gmt2df","text":"tibble columns: term, description, gene.","code":""},{"path":"https://evanbio.github.io/evanverse/reference/gmt2df.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"📄 Convert GMT File to Long-format Data Frame — gmt2df","text":"","code":"# gmt_file <- system.file(\"extdata\", \"h.all.v2024.1.Hs.symbols.gmt\", package = \"evanverse\") # gmt2df(gmt_file)"},{"path":"https://evanbio.github.io/evanverse/reference/gmt2list.html","id":null,"dir":"Reference","previous_headings":"","what":"📄 Convert GMT File to Named List — gmt2list","title":"📄 Convert GMT File to Named List — gmt2list","text":"Reads .gmt gene set file returns named list, list element gene set.","code":""},{"path":"https://evanbio.github.io/evanverse/reference/gmt2list.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"📄 Convert GMT File to Named List — gmt2list","text":"","code":"gmt2list(file, verbose = TRUE)"},{"path":"https://evanbio.github.io/evanverse/reference/gmt2list.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"📄 Convert GMT File to Named List — gmt2list","text":"file Path .gmt file. verbose Logical. Whether print message. Default = TRUE.","code":""},{"path":"https://evanbio.github.io/evanverse/reference/gmt2list.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"📄 Convert GMT File to Named List — gmt2list","text":"named list element character vector gene symbols.","code":""},{"path":"https://evanbio.github.io/evanverse/reference/gmt2list.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"📄 Convert GMT File to Named List — gmt2list","text":"","code":"# gmt_file <- system.file(\"extdata\", \"h.all.v2024.1.Hs.symbols.gmt\", package = \"evanverse\") # gene_sets <- gmt2list(gmt_file)"},{"path":"https://evanbio.github.io/evanverse/reference/grapes-is-grapes.html","id":null,"dir":"Reference","previous_headings":"","what":"Strict identity comparison with diagnostics — %is%","title":"Strict identity comparison with diagnostics — %is%","text":"semantic operator checks whether two objects strictly identical, prints differ .","code":""},{"path":"https://evanbio.github.io/evanverse/reference/grapes-is-grapes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Strict identity comparison with diagnostics — %is%","text":"","code":"a %is% b"},{"path":"https://evanbio.github.io/evanverse/reference/grapes-is-grapes.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Strict identity comparison with diagnostics — %is%","text":"First object (vector, matrix, data.frame) b Second object (vector, matrix, data.frame)","code":""},{"path":"https://evanbio.github.io/evanverse/reference/grapes-is-grapes.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Strict identity comparison with diagnostics — %is%","text":"TRUE identical, FALSE otherwise (diagnostics)","code":""},{"path":"https://evanbio.github.io/evanverse/reference/grapes-is-grapes.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Strict identity comparison with diagnostics — %is%","text":"","code":"1:3 %is% 1:3          # TRUE #> [1] TRUE 1:3 %is% c(1, 2, 3)   # FALSE, type mismatch #> ── ❌ Objects are NOT identical ──────────────────────────────────────────────── #> ✖ Type mismatch: \"integer\" vs \"double\" #> ✖ Class mismatch: \"integer\" vs \"numeric\" #> [1] FALSE data.frame(x=1) %is% data.frame(y=1)  # FALSE, name mismatch #> ── ❌ Objects are NOT identical ──────────────────────────────────────────────── #> ✖ Column names differ: \"x\" vs \"y\" #> ✖ Values are not identical. #> [1] FALSE"},{"path":"https://evanbio.github.io/evanverse/reference/grapes-nin-grapes.html","id":null,"dir":"Reference","previous_headings":"","what":"❌ %nin%: Not In Operator — %nin%","title":"❌ %nin%: Not In Operator — %nin%","text":"binary operator test elements left-hand vector present right-hand vector. negation %%, equivalent !(x %% y).","code":""},{"path":"https://evanbio.github.io/evanverse/reference/grapes-nin-grapes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"❌ %nin%: Not In Operator — %nin%","text":"","code":"... %nin% NA"},{"path":"https://evanbio.github.io/evanverse/reference/grapes-nin-grapes.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"❌ %nin%: Not In Operator — %nin%","text":"x vector values test. table vector match .","code":""},{"path":"https://evanbio.github.io/evanverse/reference/grapes-nin-grapes.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"❌ %nin%: Not In Operator — %nin%","text":"logical vector indicating elements x table.","code":""},{"path":"https://evanbio.github.io/evanverse/reference/grapes-nin-grapes.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"❌ %nin%: Not In Operator — %nin%","text":"","code":"c(\"A\", \"B\", \"C\") %nin% c(\"B\", \"D\")  # TRUE FALSE TRUE #> [1]  TRUE FALSE  TRUE 1:5 %nin% c(2, 4)                   # TRUE FALSE TRUE FALSE TRUE #> [1]  TRUE FALSE  TRUE FALSE  TRUE"},{"path":"https://evanbio.github.io/evanverse/reference/grapes-p-grapes.html","id":null,"dir":"Reference","previous_headings":"","what":"Paste two strings with a space — %p%","title":"Paste two strings with a space — %p%","text":"%p% custom infix operator string concatenation single space. ’s inspired readability %>%, meant expressive text building.","code":""},{"path":"https://evanbio.github.io/evanverse/reference/grapes-p-grapes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Paste two strings with a space — %p%","text":"","code":"lhs %p% rhs"},{"path":"https://evanbio.github.io/evanverse/reference/grapes-p-grapes.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Paste two strings with a space — %p%","text":"lhs character vector left-hand side. rhs character vector right-hand side.","code":""},{"path":"https://evanbio.github.io/evanverse/reference/grapes-p-grapes.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Paste two strings with a space — %p%","text":"character vector, elements lhs rhs pasted together using space.","code":""},{"path":"https://evanbio.github.io/evanverse/reference/grapes-p-grapes.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Paste two strings with a space — %p%","text":"","code":"\"Hello\" %p% \"world\" #> [1] \"Hello world\" \"Good\" %p% \"job\" #> [1] \"Good job\""},{"path":"https://evanbio.github.io/evanverse/reference/hex2rgb.html","id":null,"dir":"Reference","previous_headings":"","what":"🎨 Convert HEX color(s) to RGB format — hex2rgb","title":"🎨 Convert HEX color(s) to RGB format — hex2rgb","text":"Converts single HEX string character vector HEX strings RGB numeric values.","code":""},{"path":"https://evanbio.github.io/evanverse/reference/hex2rgb.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"🎨 Convert HEX color(s) to RGB format — hex2rgb","text":"","code":"hex2rgb(hex)"},{"path":"https://evanbio.github.io/evanverse/reference/hex2rgb.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"🎨 Convert HEX color(s) to RGB format — hex2rgb","text":"hex HEX color string (e.g., \"#FF8000\") character vector HEX codes.","code":""},{"path":"https://evanbio.github.io/evanverse/reference/hex2rgb.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"🎨 Convert HEX color(s) to RGB format — hex2rgb","text":"numeric vector length 3 single HEX input, named list RGB vectors multiple inputs.","code":""},{"path":"https://evanbio.github.io/evanverse/reference/hex2rgb.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"🎨 Convert HEX color(s) to RGB format — hex2rgb","text":"","code":"hex2rgb(\"#FF8000\") #> ✔ #FF8000 -> RGB: c(255, 128, 0) #> [1] 255 128   0 hex2rgb(c(\"#FF8000\", \"#00FF00\")) #> ✔ Converted 2 HEX values to RGB: #> ℹ #FF8000 -> RGB: c(255, 128, 0) #> ℹ #00FF00 -> RGB: c(0, 255, 0) #> $`#FF8000` #> [1] 255 128   0 #>  #> $`#00FF00` #> [1]   0 255   0 #>"},{"path":"https://evanbio.github.io/evanverse/reference/inst_pkg.html","id":null,"dir":"Reference","previous_headings":"","what":"📦 Install R Packages from Multiple Sources — inst_pkg","title":"📦 Install R Packages from Multiple Sources — inst_pkg","text":"unified installer R packages CRAN, GitHub, Bioconductor, local source.","code":""},{"path":"https://evanbio.github.io/evanverse/reference/inst_pkg.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"📦 Install R Packages from Multiple Sources — inst_pkg","text":"","code":"inst_pkg(   pkg = NULL,   source = c(\"CRAN\", \"GitHub\", \"Bioconductor\", \"local\"),   path = NULL,   ... )"},{"path":"https://evanbio.github.io/evanverse/reference/inst_pkg.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"📦 Install R Packages from Multiple Sources — inst_pkg","text":"pkg Package name(s) GitHub repo (e.g., \"user/repo\"). required source = \"local\". source Source package: \"CRAN\", \"GitHub\", \"Bioconductor\", \"local\". Case-insensitive, shorthand allowed. path Path local package file (used source = \"local\"). ... Additional arguments passed install.packages(), devtools::install_github(), BiocManager::install().","code":""},{"path":"https://evanbio.github.io/evanverse/reference/inst_pkg.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"📦 Install R Packages from Multiple Sources — inst_pkg","text":"NULL (invisibly)","code":""},{"path":"https://evanbio.github.io/evanverse/reference/inst_pkg.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"📦 Install R Packages from Multiple Sources — inst_pkg","text":"","code":"inst_pkg(\"dplyr\", source = \"cran\") #> ✅ Package [dplyr] is already installed. Skipped. inst_pkg(\"hadley/emo\", source = \"gh\") #> 🔽 Installing from GitHub: [hadley/emo] #> Using GitHub PAT from the git credential store. #> Downloading GitHub repo hadley/emo@HEAD #>  #> ── R CMD build ───────────────────────────────────────────────────────────────── #> * checking for file 'C:\\Users\\84241\\AppData\\Local\\Temp\\Rtmpwderkg\\remotes195f846d34625\\hadley-emo-3f03b11/DESCRIPTION' ... OK  #> * preparing 'emo':  #> * checking DESCRIPTION meta-information ... OK  #> * checking for LF line-endings in source and make files and shell scripts  #> * checking for empty or unneeded directories  #> * building 'emo_0.0.0.9000.tar.gz'  #>   #> Installing package into 'C:/Users/84241/AppData/Local/Temp/Rtmp2bRWup/temp_libpath1740535af23' #> (as 'lib' is unspecified) #> 🎉 Installation complete! inst_pkg(\"scRNAseq\", source = \"bio\") #> ✅ Package [scRNAseq] is already installed. Skipped. inst_pkg(source = \"local\", path = \"mypackage.tar.gz\") #> 📂 Installing from local path: [mypackage.tar.gz] #> Installing package into 'C:/Users/84241/AppData/Local/Temp/Rtmp2bRWup/temp_libpath1740535af23' #> (as 'lib' is unspecified) #> Warning: installation of package 'mypackage.tar.gz' had non-zero exit status #> 🎉 Installation complete!"},{"path":"https://evanbio.github.io/evanverse/reference/is_void.html","id":null,"dir":"Reference","previous_headings":"","what":"🕳️ is_void(): Check for Null / NA / Blank (","title":"🕳️ is_void(): Check for Null / NA / Blank (","text":"Determine whether input values considered \"void\": NULL, NA, \"\". condition controlled dedicated argument.","code":""},{"path":"https://evanbio.github.io/evanverse/reference/is_void.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"🕳️ is_void(): Check for Null / NA / Blank (","text":"","code":"is_void(x, include_na = TRUE, include_null = TRUE, include_empty_str = TRUE)"},{"path":"https://evanbio.github.io/evanverse/reference/is_void.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"🕳️ is_void(): Check for Null / NA / Blank (","text":"x vector list evaluate. include_na Logical. Consider NA void. Default: TRUE. include_null Logical. Consider NULL void. Default: TRUE. include_empty_str Logical. Consider \"\" void. Default: TRUE.","code":""},{"path":"https://evanbio.github.io/evanverse/reference/is_void.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"🕳️ is_void(): Check for Null / NA / Blank (","text":"logical vector indicating elements void.","code":""},{"path":"https://evanbio.github.io/evanverse/reference/is_void.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"🕳️ is_void(): Check for Null / NA / Blank (","text":"","code":"is_void(c(NA, \"\", \"text\"))                  # TRUE TRUE FALSE #> [1]  TRUE  TRUE FALSE is_void(list(NA, \"\", NULL, \"a\"))            # TRUE TRUE TRUE FALSE #> [1]  TRUE  TRUE  TRUE FALSE is_void(\"NA\", include_na = FALSE)           # FALSE #> [1] FALSE is_void(NULL)                               # TRUE #> [1] TRUE"},{"path":"https://evanbio.github.io/evanverse/reference/list_palettes.html","id":null,"dir":"Reference","previous_headings":"","what":"🎨 list_palettes(): List All Color Palettes from RDS — list_palettes","title":"🎨 list_palettes(): List All Color Palettes from RDS — list_palettes","text":"Load list available color palettes compiled RDS file.","code":""},{"path":"https://evanbio.github.io/evanverse/reference/list_palettes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"🎨 list_palettes(): List All Color Palettes from RDS — list_palettes","text":"","code":"list_palettes(   palette_rds = \"data/palettes.rds\",   type = c(\"sequential\", \"diverging\", \"qualitative\"),   sort = TRUE,   verbose = TRUE )"},{"path":"https://evanbio.github.io/evanverse/reference/list_palettes.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"🎨 list_palettes(): List All Color Palettes from RDS — list_palettes","text":"palette_rds Path RDS file. Default: \"data/palettes.rds\". type Palette type(s) filter: \"sequential\", \"diverging\", \"qualitative\". Default: . sort Whether sort type, n_color, name. Default: TRUE. verbose Whether print listing details console. Default: TRUE.","code":""},{"path":"https://evanbio.github.io/evanverse/reference/list_palettes.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"🎨 list_palettes(): List All Color Palettes from RDS — list_palettes","text":"data.frame columns: name, type, n_color, colors.","code":""},{"path":"https://evanbio.github.io/evanverse/reference/list_palettes.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"🎨 list_palettes(): List All Color Palettes from RDS — list_palettes","text":"","code":"list_palettes() #> ✖ Palette file not found: data/palettes.rds list_palettes(type = \"qualitative\") #> ✖ Palette file not found: data/palettes.rds list_palettes(type = c(\"sequential\", \"diverging\")) #> ✖ Palette file not found: data/palettes.rds"},{"path":"https://evanbio.github.io/evanverse/reference/pkg_version.html","id":null,"dir":"Reference","previous_headings":"","what":"🔍 pkg_version: Check Installed and Latest Versions of R Packages — pkg_version","title":"🔍 pkg_version: Check Installed and Latest Versions of R Packages — pkg_version","text":"function checks installed latest available versions R packages across CRAN, Bioconductor, GitHub. supports case-insensitive matching smart console previews.","code":""},{"path":"https://evanbio.github.io/evanverse/reference/pkg_version.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"🔍 pkg_version: Check Installed and Latest Versions of R Packages — pkg_version","text":"","code":"pkg_version(pkg, preview = TRUE)"},{"path":"https://evanbio.github.io/evanverse/reference/pkg_version.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"🔍 pkg_version: Check Installed and Latest Versions of R Packages — pkg_version","text":"pkg Character vector package names. preview Logical. TRUE, print result console.","code":""},{"path":"https://evanbio.github.io/evanverse/reference/pkg_version.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"🔍 pkg_version: Check Installed and Latest Versions of R Packages — pkg_version","text":"data.frame columns: package, version (installed), latest (available), source.","code":""},{"path":"https://evanbio.github.io/evanverse/reference/pkg_version.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"🔍 pkg_version: Check Installed and Latest Versions of R Packages — pkg_version","text":"","code":"pkg_version(c(\"ggplot2\", \"limma\", \"MRPRESSO\", \"nonexistentpackage123\")) #>  #> ── Fetching installed R packages... ──────────────────────────────────────────── #>  #> ── Fetching CRAN package database... ─────────────────────────────────────────── #>  #> ── Fetching Bioconductor package database... ─────────────────────────────────── #> 'getOption(\"repos\")' replaces Bioconductor standard repositories, see #> 'help(\"repositories\", package = \"BiocManager\")' for details. #> Replacement repositories: #>     CRAN: https://mirrors.tuna.tsinghua.edu.cn/CRAN/ #>  #> ── Checking package: ggplot2 ── #>  #> ✔ Found on CRAN: 3.5.2 #>  #> ── Checking package: limma ── #>  #> ✔ Found on Bioconductor: 3.64.0 #>  #> ── Checking package: MRPRESSO ── #>  #> ✔ Found on GitHub: GitHub (rondolab/MR-PRESSO@HEAD) (SHA: 3e3c92d) #>  #> ── Checking package: nonexistentpackage123 ── #>  #> ! Not found in CRAN, Bioconductor, or GitHub. #>                 package version  latest                           source #> 1               ggplot2   3.5.2   3.5.2                             CRAN #> 2                 limma  3.64.0  3.64.0                     Bioconductor #> 3              MRPRESSO     1.0 3e3c92d GitHub (rondolab/MR-PRESSO@HEAD) #> 4 nonexistentpackage123    <NA>    <NA>                        Not Found"},{"path":"https://evanbio.github.io/evanverse/reference/plot_pie.html","id":null,"dir":"Reference","previous_headings":"","what":"🥧 Plot a Clean Pie Chart with Optional Inner Labels — plot_pie","title":"🥧 Plot a Clean Pie Chart with Optional Inner Labels — plot_pie","text":"Generate polished pie chart vector grouped data frame. Labels (optional) placed inside pie slices.","code":""},{"path":"https://evanbio.github.io/evanverse/reference/plot_pie.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"🥧 Plot a Clean Pie Chart with Optional Inner Labels — plot_pie","text":"","code":"plot_pie(   data,   group_col = \"group\",   count_col = \"count\",   label = c(\"none\", \"count\", \"percent\", \"both\"),   label_size = 4,   label_color = \"black\",   fill = c(\"#009076\", \"#C71E1D\", \"#15607A\", \"#FA8C00\", \"#18A1CD\"),   title = \"Pie Chart\",   title_size = 14,   title_color = \"black\",   legend.position = \"right\",   preview = TRUE,   save = NULL,   return_data = FALSE )"},{"path":"https://evanbio.github.io/evanverse/reference/plot_pie.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"🥧 Plot a Clean Pie Chart with Optional Inner Labels — plot_pie","text":"data character/factor vector data.frame. group_col Group column name (data.frame). Default: \"group\". count_col Count column name (data.frame). Default: \"count\". label Type label display: \"none\", \"count\", \"percent\", \"\". Default: \"none\". label_size Label font size. Default: 4. label_color Label font color. Default: \"black\". fill Fill color vector. Default: 5-color palette. title Plot title. Default: \"Pie Chart\". title_size Title font size. Default: 14. title_color Title color. Default: \"black\". legend.position Legend position. Default: \"right\". preview Whether print plot. Default: TRUE. save Optional path save plot (e.g., \"plot.png\"). return_data TRUE, return list(plot = ..., data = ...). Default: FALSE.","code":""},{"path":"https://evanbio.github.io/evanverse/reference/plot_pie.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"🥧 Plot a Clean Pie Chart with Optional Inner Labels — plot_pie","text":"ggplot object list(plot, data)","code":""},{"path":"https://evanbio.github.io/evanverse/reference/plot_venn.html","id":null,"dir":"Reference","previous_headings":"","what":"🎨 Draw Venn Diagrams (2–4 sets, classic or gradient style) — plot_venn","title":"🎨 Draw Venn Diagrams (2–4 sets, classic or gradient style) — plot_venn","text":"flexible unified Venn diagram plotting function supporting ggvenn ggVennDiagram. Automatically handles naming, de-duplication, visualization.","code":""},{"path":"https://evanbio.github.io/evanverse/reference/plot_venn.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"🎨 Draw Venn Diagrams (2–4 sets, classic or gradient style) — plot_venn","text":"","code":"plot_venn(   set1,   set2,   set3 = NULL,   set4 = NULL,   category.names = NULL,   fill = c(\"skyblue\", \"pink\", \"lightgreen\", \"lightyellow\"),   label = \"count\",   label_geom = \"label\",   label_alpha = 0,   fill_alpha = 0.5,   label_size = 4,   label_color = \"black\",   set_color = \"black\",   set_size = 5,   edge_lty = \"solid\",   edge_size = 0.8,   title = \"My Venn Diagram\",   title_size = 14,   title_color = \"#F06292\",   legend.position = \"none\",   method = c(\"classic\", \"gradient\"),   digits = 1,   label_sep = \",\",   show_outside = \"auto\",   auto_scale = FALSE,   palette = \"Spectral\",   direction = 1,   preview = TRUE,   return_sets = FALSE,   ... )"},{"path":"https://evanbio.github.io/evanverse/reference/plot_venn.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"🎨 Draw Venn Diagrams (2–4 sets, classic or gradient style) — plot_venn","text":"set1, set2, set3, set4 Input vectors. least two sets required. category.names Optional vector set names. NULL, variable names used. fill Fill colors (method = \"classic\"). label Label type: \"count\", \"percent\", \"\", \"none\". label_geom Label geometry ggVennDiagram: \"label\" \"text\". label_alpha Background transparency labels (gradient). fill_alpha Transparency filled regions (classic). label_size Size region labels. label_color Color region labels. set_color Color set labels borders. set_size Font size set names. edge_lty Line type borders. edge_size Border thickness. title Plot title. title_size Title font size. title_color Title font color. legend.position Legend position. Default: \"none\". method Drawing method: \"classic\" (ggvenn) \"gradient\" (ggVennDiagram). digits Decimal places percentages (classic ). label_sep Separator overlapping elements (classic ). show_outside Show outside elements (classic ). auto_scale Whether auto-scale layout (classic ). palette Gradient palette name (gradient ). direction Palette direction (gradient ). preview Whether print plot screen. return_sets TRUE, returns list de-duplicated input sets. ... Additional arguments passed underlying plot function.","code":""},{"path":"https://evanbio.github.io/evanverse/reference/plot_venn.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"🎨 Draw Venn Diagrams (2–4 sets, classic or gradient style) — plot_venn","text":"ggplot object (optionally list processed sets return_sets = TRUE).","code":""},{"path":"https://evanbio.github.io/evanverse/reference/plot_venn.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"🎨 Draw Venn Diagrams (2–4 sets, classic or gradient style) — plot_venn","text":"","code":"set.seed(123) g1 <- sample(letters, 15) g2 <- sample(letters, 10) g3 <- sample(letters, 12)  # Classic 3-set Venn plot_venn(g1, g2, g3, method = \"classic\", title = \"Classic Venn\")    # Gradient 2-set Venn plot_venn(g1, g2, method = \"gradient\", title = \"Gradient Venn\")    # Return sets for downstream use out <- plot_venn(g1, g2, return_sets = TRUE)  names(out) #> [1] \"plot\" \"sets\""},{"path":"https://evanbio.github.io/evanverse/reference/preview_palette.html","id":null,"dir":"Reference","previous_headings":"","what":"🖼 preview_palette(): Visualize a Palette from RDS — preview_palette","title":"🖼 preview_palette(): Visualize a Palette from RDS — preview_palette","text":"Preview appearance palette data/palettes.rds using various plot types.","code":""},{"path":"https://evanbio.github.io/evanverse/reference/preview_palette.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"🖼 preview_palette(): Visualize a Palette from RDS — preview_palette","text":"","code":"preview_palette(   name,   type = c(\"sequential\", \"diverging\", \"qualitative\"),   n = NULL,   plot_type = c(\"bar\", \"pie\", \"point\", \"rect\", \"circle\"),   title = name,   palette_rds = \"data/palettes.rds\",   preview = TRUE )"},{"path":"https://evanbio.github.io/evanverse/reference/preview_palette.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"🖼 preview_palette(): Visualize a Palette from RDS — preview_palette","text":"name Name palette. type Palette type: \"sequential\", \"diverging\", \"qualitative\". n Number colors use (default: ). plot_type Plot style: \"bar\", \"pie\", \"point\", \"rect\", \"circle\". title Plot title (default: palette name). palette_rds Path RDS file. Default: \"data/palettes.rds\". preview Whether show plot immediately. Default: TRUE.","code":""},{"path":"https://evanbio.github.io/evanverse/reference/preview_palette.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"🖼 preview_palette(): Visualize a Palette from RDS — preview_palette","text":"NULL (invisible), plotting side effect.","code":""},{"path":"https://evanbio.github.io/evanverse/reference/remind.html","id":null,"dir":"Reference","previous_headings":"","what":"📌 Show usage tips for common R commands — remind","title":"📌 Show usage tips for common R commands — remind","text":"helper recall commonly used R functions examples.","code":""},{"path":"https://evanbio.github.io/evanverse/reference/remind.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"📌 Show usage tips for common R commands — remind","text":"","code":"remind(keyword = NULL)"},{"path":"https://evanbio.github.io/evanverse/reference/remind.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"📌 Show usage tips for common R commands — remind","text":"keyword keyword like \"glimpse\" \"read_excel\". NULL, show examples.","code":""},{"path":"https://evanbio.github.io/evanverse/reference/remind.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"📌 Show usage tips for common R commands — remind","text":"Printed reminder keyword list (invisibly)","code":""},{"path":"https://evanbio.github.io/evanverse/reference/remind.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"📌 Show usage tips for common R commands — remind","text":"","code":"remind(\"glimpse\") #>  #> ── 🔎 glimpse ────────────────────────────────────────────────────────────────── #> 🔍 `glimpse(df)` from dplyr gives a compact overview.  #>  remind()  # Show all keywords #>  #> ── Usage Examples ────────────────────────────────────────────────────────────── #> ℹ \"glimpse\": 🔍 `glimpse(df)` from dplyr gives a compact overview. #> ── Available Keywords ────────────────────────────────────────────────────────── #> `glimpse, read_excel, droplevels, modifyList, do.call, sprintf, scRNAseq, #> basename, here, stopifnot, object.size, slice, unzip, gunzip, untar, NoLegend, #> RotatedAxis, guides`"},{"path":"https://evanbio.github.io/evanverse/reference/replace_void.html","id":null,"dir":"Reference","previous_headings":"","what":"🔁 replace_void(): Replace Void Values (NA / NULL / ","title":"🔁 replace_void(): Replace Void Values (NA / NULL / ","text":"Replace elements vector list considered \"void\" user-defined value. Void values include NA, NULL, empty strings (\"\"), toggleable.","code":""},{"path":"https://evanbio.github.io/evanverse/reference/replace_void.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"🔁 replace_void(): Replace Void Values (NA / NULL / ","text":"","code":"replace_void(   x,   value = NA,   include_na = TRUE,   include_null = TRUE,   include_empty_str = TRUE )"},{"path":"https://evanbio.github.io/evanverse/reference/replace_void.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"🔁 replace_void(): Replace Void Values (NA / NULL / ","text":"x vector list. value replacement value use voids. Default: NA. include_na Logical. Replace NA TRUE. Default: TRUE. include_null Logical. Replace NULL TRUE. Default: TRUE. include_empty_str Logical. Replace \"\" TRUE. Default: TRUE.","code":""},{"path":"https://evanbio.github.io/evanverse/reference/replace_void.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"🔁 replace_void(): Replace Void Values (NA / NULL / ","text":"cleaned vector list void values replaced.","code":""},{"path":"https://evanbio.github.io/evanverse/reference/replace_void.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"🔁 replace_void(): Replace Void Values (NA / NULL / ","text":"","code":"replace_void(c(NA, \"\", \"a\"), value = \"N/A\") #> [1] \"N/A\" \"N/A\" \"a\"   replace_void(list(\"A\", \"\", NULL, NA), value = \"missing\") #> [[1]] #> [1] \"A\" #>  #> [[2]] #> [1] \"missing\" #>  #> [[3]] #> [1] \"missing\" #>  #> [[4]] #> [1] \"missing\" #>  replace_void(c(\"\", \"b\"), value = 0, include_empty_str = TRUE) #> [1] \"0\" \"b\""},{"path":"https://evanbio.github.io/evanverse/reference/rgb2hex.html","id":null,"dir":"Reference","previous_headings":"","what":"🎨 Convert RGB values to HEX color codes — rgb2hex","title":"🎨 Convert RGB values to HEX color codes — rgb2hex","text":"utility function convert RGB color values (either numeric vector list vectors) HEX color codes, informative feedback.","code":""},{"path":"https://evanbio.github.io/evanverse/reference/rgb2hex.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"🎨 Convert RGB values to HEX color codes — rgb2hex","text":"","code":"rgb2hex(rgb)"},{"path":"https://evanbio.github.io/evanverse/reference/rgb2hex.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"🎨 Convert RGB values to HEX color codes — rgb2hex","text":"rgb numeric vector length 3 (e.g. c(255, 128, 0)), list vectors (e.g. list(c(255, 128, 0), c(0, 255, 0))).","code":""},{"path":"https://evanbio.github.io/evanverse/reference/rgb2hex.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"🎨 Convert RGB values to HEX color codes — rgb2hex","text":"HEX color string single RGB vector provided, character vector HEX codes list RGB values provided.","code":""},{"path":"https://evanbio.github.io/evanverse/reference/rgb2hex.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"🎨 Convert RGB values to HEX color codes — rgb2hex","text":"","code":"# Convert single RGB value rgb2hex(c(255, 128, 0))  # \"#FF8000\" #> ✔ RGB: c(255, 128, 0) → HEX: #FF8000 #> [1] \"#FF8000\"  # Convert multiple RGB values rgb2hex(list(c(255, 128, 0), c(0, 255, 0)))  # c(\"#FF8000\", \"#00FF00\") #> ✔ Converted 2 RGB value(s) to HEX: #> ℹ RGB: c(255, 128, 0) → HEX: #FF8000 #> ℹ RGB: c(0, 255, 0) → HEX: #00FF00 #> [1] \"#FF8000\" \"#00FF00\""},{"path":"https://evanbio.github.io/evanverse/reference/rows_with_void.html","id":null,"dir":"Reference","previous_headings":"","what":"🧭 rows_with_void(): Detect Rows Containing Void Values (NA / NULL / ","title":"🧭 rows_with_void(): Detect Rows Containing Void Values (NA / NULL / ","text":"Scan data.frame tibble identify rows contain \"void\" values. Void values include NA, NULL, empty strings (\"\"), can toggled via parameters.","code":""},{"path":"https://evanbio.github.io/evanverse/reference/rows_with_void.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"🧭 rows_with_void(): Detect Rows Containing Void Values (NA / NULL / ","text":"","code":"rows_with_void(   data,   include_na = TRUE,   include_null = TRUE,   include_empty_str = TRUE )"},{"path":"https://evanbio.github.io/evanverse/reference/rows_with_void.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"🧭 rows_with_void(): Detect Rows Containing Void Values (NA / NULL / ","text":"data data.frame tibble. include_na Logical. Detect NA TRUE. Default: TRUE. include_null Logical. Detect NULL TRUE. Default: TRUE. include_empty_str Logical. Detect \"\" TRUE. Default: TRUE.","code":""},{"path":"https://evanbio.github.io/evanverse/reference/rows_with_void.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"🧭 rows_with_void(): Detect Rows Containing Void Values (NA / NULL / ","text":"logical vector indicating row contains void values.","code":""},{"path":"https://evanbio.github.io/evanverse/reference/rows_with_void.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"🧭 rows_with_void(): Detect Rows Containing Void Values (NA / NULL / ","text":"","code":"df <- data.frame(id = 1:3, name = c(\"A\", \"\", \"C\"), score = c(10, NA, 20)) rows_with_void(df) #> [1] FALSE  TRUE FALSE df[rows_with_void(df), ] #>   id name score #> 2  2         NA"},{"path":"https://evanbio.github.io/evanverse/reference/update_pkg.html","id":null,"dir":"Reference","previous_headings":"","what":"🔄 Update R Packages from CRAN, GitHub, or Bioconductor — update_pkg","title":"🔄 Update R Packages from CRAN, GitHub, or Bioconductor — update_pkg","text":"unified function update R packages source. Supports full updates, source-specific updates, targeted package updates. Automatically sets mirrors (Tsinghua CRAN, Tsinghua Bioconductor) handles version compatibility checks. Ensures Bioconductor installations specify correct version avoid mismatches.","code":""},{"path":"https://evanbio.github.io/evanverse/reference/update_pkg.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"🔄 Update R Packages from CRAN, GitHub, or Bioconductor — update_pkg","text":"","code":"update_pkg(pkg = NULL, source = NULL)"},{"path":"https://evanbio.github.io/evanverse/reference/update_pkg.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"🔄 Update R Packages from CRAN, GitHub, or Bioconductor — update_pkg","text":"pkg Character vector. Name(s) package(s) update. GitHub, use \"user/repo\" format. required source specified. source Character. source package(s): \"CRAN\", \"GitHub\" (\"gh\"), \"Bioconductor\" (\"bio\"). Optional updating installed CRAN Bioconductor packages.","code":""},{"path":"https://evanbio.github.io/evanverse/reference/update_pkg.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"🔄 Update R Packages from CRAN, GitHub, or Bioconductor — update_pkg","text":"Invisible NULL. Outputs update progress logs via message().","code":""},{"path":"https://evanbio.github.io/evanverse/reference/with_timer.html","id":null,"dir":"Reference","previous_headings":"","what":"⏱️ Wrap a function to measure and display execution time — with_timer","title":"⏱️ Wrap a function to measure and display execution time — with_timer","text":"utility wraps function CLI-based timing displays runtime seconds. especially useful benchmarking logging time-consuming tasks.","code":""},{"path":"https://evanbio.github.io/evanverse/reference/with_timer.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"⏱️ Wrap a function to measure and display execution time — with_timer","text":"","code":"with_timer(fn, name = \"Task\")"},{"path":"https://evanbio.github.io/evanverse/reference/with_timer.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"⏱️ Wrap a function to measure and display execution time — with_timer","text":"fn function wrapped name short descriptive name task (used log output)","code":""},{"path":"https://evanbio.github.io/evanverse/reference/with_timer.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"⏱️ Wrap a function to measure and display execution time — with_timer","text":"new function executes fn(...) prints timing information","code":""},{"path":"https://evanbio.github.io/evanverse/reference/with_timer.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"⏱️ Wrap a function to measure and display execution time — with_timer","text":"function requires cli tictoc packages.","code":""},{"path":"https://evanbio.github.io/evanverse/reference/with_timer.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"⏱️ Wrap a function to measure and display execution time — with_timer","text":"","code":"slow_fn <- function(n) { Sys.sleep(0.2); n^2 } timed_fn <- with_timer(slow_fn, name = \"Square Task\") timed_fn(5) #>  #> ── Square Task started at 2025-04-22 16:59:11.681396 ─────────────────────────── #> ✔ Square Task completed in \"0.200\" seconds"},{"path":"https://evanbio.github.io/evanverse/news/index.html","id":"evanverse-010","dir":"Changelog","previous_headings":"","what":"evanverse 0.1.0","title":"evanverse 0.1.0","text":"✨ First Release 🎉 Introduced %p% operator expressive string concatenation Built modular structure dev/00_setup.R, tests, MIT license Added GitHub integration install instructions","code":""}]
